# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-19 19:28
from __future__ import unicode_literals

import calaccess_processed.models.opencivicdata.base
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('calaccess_processed', '0015_auto_20170119_0531'),
    ]

    operations = [
        migrations.CreateModel(
            name='BallotMeasureContest',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('name', models.CharField(help_text='Name of the contest, not necessarily as it appears on the ballot.', max_length=300)),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-ballotmeasurecontest/{{uuid}}``.', ocd_type='ballotmeasurecontest', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-ballotmeasurecontest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-ballotmeasurecontest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('con_statement', models.TextField(blank=True, help_text='Specifies a statement in opposition to the ballot measure. It does not necessarily appear on the ballot.')),
                ('effect_of_abstain', models.CharField(blank=True, help_text='Specifies the effect abstaining from voting on the ballot measure, i.e., whether abstaining is considered a vote against it.', max_length=300)),
                ('full_text', models.TextField(blank=True, help_text='Specifies the full text of the ballot measure as it appears on the ballot.')),
                ('passage_threshold', models.CharField(blank=True, help_text='Specifies the threshold of votes the ballot measure needs in order to pass (string). The default is a simple majority, i.e., "50% plus one vote". Other common thresholds are "three-fifths" and "two-thirds".', max_length=300)),
                ('pro_statement', models.TextField(blank=True, help_text='Specifies a statement in favor of the referendum. It does not necessarily appear on the ballot.')),
                ('summary_text', models.TextField(blank=True, help_text='Specifies a short summary of the ballot measure that is on the ballot, below the title, but above the text.')),
                ('ballot_measure_type', models.CharField(blank=True, choices=[('b', 'ballot-measure'), ('i', 'initiative'), ('r', 'referendum'), ('o', 'other')], help_text='Enumerated among:\n\t* ballot-measure: A catch-all for generic types of non-candidate-based contests.\n\t* initiative: These are usually citizen-driven measures to be placed on the ballot. These could include both statutory changes and constitutional amendments.\n\t* referendum: These could include measures to repeal existing acts of legislation, legislative referrals, and legislatively-referred state constitutional amendments.\n\t* other: Anything that does not fall into the above categories.', max_length=1)),
                ('other_type', models.CharField(blank=True, help_text='Allows for cataloging a new type of ballot measure option, when type is specified as "other".', max_length=300)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BallotMeasureSelection',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-ballotmeasureselection/{{uuid}}``.', ocd_type='ballotmeasureselection', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-ballotmeasureselection/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-ballotmeasureselection/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('selection', models.CharField(help_text='Selection text for the option on the ballot , e.g., "Yes", "No", "Recall", "Don\'t recall".', max_length=300)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Candidacy',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-candidacy/{{uuid}}``.', ocd_type='candidacy', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-candidacy/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-candidacy/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('ballot_name', models.CharField(help_text='The candidate\'s name as it will be displayed on the official ballot, e.g. "Ken T. Cuccinelli II".', max_length=300)),
                ('filed_date', models.DateField(help_text='Specifies when the candidate filed for the contest.', null=True)),
                ('is_incumbent', models.NullBooleanField(help_text='Indicates whether the candidate is the incumbent for the office associated with the contest.')),
                ('is_top_ticket', models.NullBooleanField(help_text='Indicates that the candidate is the top of a ticket that includes multiple candidates. For example, the candidate running for President is consider the top of the President/Vice President ticket. In many states, this is also true of the Governor/Lieutenant Governor.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CandidateContest',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('name', models.CharField(help_text='Name of the contest, not necessarily as it appears on the ballot.', max_length=300)),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-candidatecontest/{{uuid}}``.', ocd_type='candidatecontest', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-candidatecontest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-candidatecontest/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('filing_deadline', models.DateField(help_text='Specifies the date and time when a candidate must have filed for the contest for the office.', null=True)),
                ('is_unexpired_term', models.NullBooleanField(help_text='Indicates that the former public office holder vacated the post before serving a full term.')),
                ('number_elected', models.CharField(blank=True, help_text="Number of candidates that are elected in the contest, i.e. 'N' of N-of-M.", max_length=300)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CandidateSelection',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-candidateselection/{{uuid}}``.', ocd_type='candidateselection', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-candidateselection/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-candidateselection/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('is_write_in', models.NullBooleanField(help_text='Indicates that the particular ballot selection allows for write-in candidates. If true, one or more write-in candidates are allowed for this contest.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', models.CharField(max_length=300, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=300)),
                ('country', models.CharField(max_length=2)),
                ('subtype1', models.CharField(blank=True, max_length=50)),
                ('subid1', models.CharField(blank=True, max_length=100)),
                ('subtype2', models.CharField(blank=True, max_length=50)),
                ('subid2', models.CharField(blank=True, max_length=100)),
                ('subtype3', models.CharField(blank=True, max_length=50)),
                ('subid3', models.CharField(blank=True, max_length=100)),
                ('subtype4', models.CharField(blank=True, max_length=50)),
                ('subid4', models.CharField(blank=True, max_length=100)),
                ('subtype5', models.CharField(blank=True, max_length=50)),
                ('subid5', models.CharField(blank=True, max_length=100)),
                ('subtype6', models.CharField(blank=True, max_length=50)),
                ('subid6', models.CharField(blank=True, max_length=100)),
                ('subtype7', models.CharField(blank=True, max_length=50)),
                ('subid7', models.CharField(blank=True, max_length=100)),
                ('redirect', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.Division')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-event/{{uuid}}``', ocd_type='event', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-event/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-event/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('name', models.CharField(help_text='Name of the event, examples include "Fiscal committee meeting on April 10th\u201d or \u201cAppropriations - S/C on Article II".', max_length=300)),
                ('description', models.TextField(blank=True, help_text='Description of the Event.')),
                ('classification', models.CharField(choices=[('C', 'committee-meeting'), ('E', 'election'), ('H', 'hearing')], help_text='Classification of the event.', max_length=1)),
                ('start_time', models.DateTimeField(help_text='Starting time of the event.')),
                ('timezone', models.CharField(help_text="Timezone in which the event's start_time and end_time is expressed.", max_length=300)),
                ('end_time', models.DateTimeField(help_text='Ending time of the event.', null=True)),
                ('all_day', models.BooleanField(default=False, help_text='Boolean value set to boolean ``True`` if the event is an all-day event, otherwise it must be set to the boolean value ``False``.')),
            ],
        ),
        migrations.CreateModel(
            name='Jurisdiction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(ocd_type=b'jurisdiction', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-jurisdiction/country:[a-z]{2}(/[^\\W\\d]+:[\\w.~-]+)*/\\w+$', regex=b'^ocd-jurisdiction/country:[a-z]{2}(/[^\\W\\d]+:[\\w.~-]+)*/\\w+$')])),
                ('name', models.CharField(max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('classification', models.CharField(choices=[(b'government', b'Government'), (b'legislature', b'Legislature'), (b'executive', b'Executive'), (b'school_system', b'School System'), (b'transit_authority', b'Transit Authority')], db_index=True, default=b'government', max_length=50)),
                ('feature_flags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jurisdictions', to='calaccess_processed.Division')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LegislativeSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=300)),
                ('classification', models.CharField(blank=True, choices=[(b'primary', b'Primary'), (b'special', b'Special')], max_length=100)),
                ('start_date', models.CharField(max_length=10)),
                ('end_date', models.CharField(max_length=10)),
                ('jurisdiction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legislative_sessions', to='calaccess_processed.Jurisdiction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(ocd_type=b'membership', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-membership/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-membership/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('label', models.CharField(blank=True, max_length=300)),
                ('role', models.CharField(blank=True, max_length=300)),
                ('start_date', models.CharField(blank=True, max_length=10)),
                ('end_date', models.CharField(blank=True, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='MembershipContactDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[(b'address', b'Postal Address'), (b'email', b'Email'), (b'url', b'URL'), (b'fax', b'Fax'), (b'text', b'Text Phone'), (b'voice', b'Voice Phone'), (b'video', b'Video Phone'), (b'pager', b'Pager'), (b'textphone', b'Device for people with hearing impairment')], max_length=50)),
                ('value', models.CharField(max_length=300)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('label', models.CharField(blank=True, max_length=300)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='calaccess_processed.Membership')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MembershipLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='calaccess_processed.Membership')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(ocd_type=b'organization', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-organization/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-organization/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('name', models.CharField(max_length=300)),
                ('image', models.URLField(blank=True, max_length=2000)),
                ('classification', models.CharField(blank=True, choices=[(b'legislature', b'Legislature'), (b'executive', b'Executive'), (b'upper', b'Upper Chamber'), (b'lower', b'Lower Chamber'), (b'party', b'Party'), (b'committee', b'Committee'), (b'commission', b'Commission'), (b'corporation', b'Corporation'), (b'agency', b'Agency'), (b'department', b'Department')], max_length=100)),
                ('founding_date', models.CharField(blank=True, max_length=10)),
                ('dissolution_date', models.CharField(blank=True, max_length=10)),
                ('jurisdiction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='calaccess_processed.Jurisdiction')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='calaccess_processed.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationContactDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[(b'address', b'Postal Address'), (b'email', b'Email'), (b'url', b'URL'), (b'fax', b'Fax'), (b'text', b'Text Phone'), (b'voice', b'Voice Phone'), (b'video', b'Video Phone'), (b'pager', b'Pager'), (b'textphone', b'Device for people with hearing impairment')], max_length=50)),
                ('value', models.CharField(max_length=300)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('label', models.CharField(blank=True, max_length=300)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='calaccess_processed.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationIdentifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=300)),
                ('scheme', models.CharField(max_length=300)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='calaccess_processed.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='calaccess_processed.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationName',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=500)),
                ('note', models.CharField(blank=True, max_length=500)),
                ('start_date', models.CharField(blank=True, max_length=10)),
                ('end_date', models.CharField(blank=True, max_length=10)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_names', to='calaccess_processed.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='calaccess_processed.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(help_text='Open Civic Data-style id in the format ``ocd-candidacy/{{uuid}}``.', ocd_type='party', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-party/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-party/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('name', models.CharField(help_text='The name of the party.', max_length=300)),
                ('abbreviation', models.CharField(blank=True, help_text='An abbreviation for the party name.', max_length=2)),
                ('color', models.CharField(blank=True, help_text='Six-character hex code representing an HTML color string. The pattern is ``[0-9a-f]{6}``.', max_length=6)),
                ('is_write_in', models.NullBooleanField(help_text='Indicates that the party is not officially recognized by a local, state, or federal organization but, rather, is a "write-in" in jurisdictions which allow candidates to free-form enter their political affiliation.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(ocd_type=b'person', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-person/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-person/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('name', models.CharField(db_index=True, max_length=300)),
                ('sort_name', models.CharField(blank=True, default=b'', max_length=100)),
                ('family_name', models.CharField(blank=True, max_length=100)),
                ('given_name', models.CharField(blank=True, max_length=100)),
                ('image', models.URLField(blank=True, max_length=2000)),
                ('gender', models.CharField(blank=True, max_length=100)),
                ('summary', models.CharField(blank=True, max_length=500)),
                ('national_identity', models.CharField(blank=True, max_length=300)),
                ('biography', models.TextField(blank=True)),
                ('birth_date', models.DateField(null=True)),
                ('death_date', models.DateField(null=True)),
            ],
            options={
                'verbose_name_plural': 'people',
            },
        ),
        migrations.CreateModel(
            name='PersonContactDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[(b'address', b'Postal Address'), (b'email', b'Email'), (b'url', b'URL'), (b'fax', b'Fax'), (b'text', b'Text Phone'), (b'voice', b'Voice Phone'), (b'video', b'Video Phone'), (b'pager', b'Pager'), (b'textphone', b'Device for people with hearing impairment')], max_length=50)),
                ('value', models.CharField(max_length=300)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('label', models.CharField(blank=True, max_length=300)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='calaccess_processed.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonIdentifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=300)),
                ('scheme', models.CharField(max_length=300)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='calaccess_processed.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='calaccess_processed.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonName',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=500)),
                ('note', models.CharField(blank=True, max_length=500)),
                ('start_date', models.CharField(blank=True, max_length=10)),
                ('end_date', models.CharField(blank=True, max_length=10)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_names', to='calaccess_processed.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='calaccess_processed.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time that this object was created at in the system.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Time that this object was last updated in the system.')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Common to all Open Civic Data types, the value is a key-value store suitable for storing arbitrary information not covered elsewhere.')),
                ('id', calaccess_processed.models.opencivicdata.base.OCDIDField(ocd_type=b'post', serialize=False, validators=[django.core.validators.RegexValidator(flags=32, message='ID must match ^ocd-post/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$', regex='^ocd-post/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$')])),
                ('label', models.CharField(max_length=300)),
                ('role', models.CharField(blank=True, max_length=300)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('division', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='calaccess_processed.Division')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='calaccess_processed.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='PostContactDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[(b'address', b'Postal Address'), (b'email', b'Email'), (b'url', b'URL'), (b'fax', b'Fax'), (b'text', b'Text Phone'), (b'voice', b'Voice Phone'), (b'video', b'Video Phone'), (b'pager', b'Pager'), (b'textphone', b'Device for people with hearing impairment')], max_length=50)),
                ('value', models.CharField(max_length=300)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('label', models.CharField(blank=True, max_length=300)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='calaccess_processed.Post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, max_length=300)),
                ('url', models.URLField(max_length=2000)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='calaccess_processed.Post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calaccess_processed.Event')),
                ('state', models.CharField(help_text='FIPS code of the state where the election is being held. Recorded in the format ``st{{fips}}`` to match references to VIP elements.', max_length=4)),
                ('is_statewide', models.BooleanField(default=True, help_text='Indicates whether the election is statewide.')),
            ],
            options={
                'abstract': False,
            },
            bases=('calaccess_processed.event',),
        ),
        migrations.CreateModel(
            name='RetentionContest',
            fields=[
                ('ballotmeasurecontest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calaccess_processed.BallotMeasureContest')),
            ],
            options={
                'abstract': False,
            },
            bases=('calaccess_processed.ballotmeasurecontest',),
        ),
        migrations.AddField(
            model_name='membership',
            name='on_behalf_of',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_on_behalf_of', to='calaccess_processed.Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='calaccess_processed.Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='calaccess_processed.Person'),
        ),
        migrations.AddField(
            model_name='membership',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='calaccess_processed.Post'),
        ),
        migrations.AlterIndexTogether(
            name='event',
            index_together=set([('start_time', 'name')]),
        ),
        migrations.AddField(
            model_name='candidateselection',
            name='contest',
            field=models.ForeignKey(help_text='References the ``CandidateContest`` in which the selection is an option.', on_delete=django.db.models.deletion.CASCADE, related_name='candidate_selections', to='calaccess_processed.BallotMeasureContest'),
        ),
        migrations.AddField(
            model_name='candidateselection',
            name='endorsement_parties',
            field=models.ManyToManyField(help_text='Each ``Party`` that is endorsing the candidates associated with the selection. The number of parties is unbounded in cases where multiple parties endorse a single candidate/ticket.', to='calaccess_processed.Party'),
        ),
        migrations.AddField(
            model_name='candidatecontest',
            name='division_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Division`` that defines the geographical scope of the contest, e.g., a specific Congressional or State Senate district.', on_delete=django.db.models.deletion.CASCADE, related_name='candidatecontest_contests', to='calaccess_processed.Division'),
        ),
        migrations.AddField(
            model_name='candidatecontest',
            name='party_id',
            field=models.ForeignKey(help_text='If the contest is among candidates of the same political party, e.g., a partisan primary election, reference to the OCD ``Party`` representing that political party.', null=True, on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.Party'),
        ),
        migrations.AddField(
            model_name='candidatecontest',
            name='posts',
            field=models.ManyToManyField(help_text='References to the OCD ``Post`` representing the public offices for which the candidates are competing. If multiple, the primary post should be listed first, e.g., the id for the President post should be listed before the id for Vice-President.', to='calaccess_processed.Post'),
        ),
        migrations.AddField(
            model_name='candidatecontest',
            name='runoff_for_contest_id',
            field=models.OneToOneField(help_text='If this contest is a runoff to determine the outcome of a previously undecided contest, reference to that ``CandidateContest``.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runoff_contest', to='calaccess_processed.CandidateContest'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='candidate_selection',
            field=models.ForeignKey(help_text='References the ``CandidateSelection`` for the candidate, i.e., the option printed on the ballot the voter would choose when voting for the candidate', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='calaccess_processed.CandidateSelection'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='committee_id',
            field=models.ForeignKey(help_text="Reference to the OCD ``Committee`` that represents the candidate's campaign finance committee for the contest.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidates', to='calaccess_processed.Organization'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='party_id',
            field=models.ForeignKey(help_text='Reference to and OCD ``Party`` with which the candidate is affiliated.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidates', to='calaccess_processed.Party'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='person_id',
            field=models.ForeignKey(help_text='Reference to an OCD ``Person`` who is the candidate.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidacies', to='calaccess_processed.Person'),
        ),
        migrations.AddField(
            model_name='candidacy',
            name='post_id',
            field=models.ForeignKey(help_text='References the ``Post`` that represents the public office for which the candidate is competing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidates', to='calaccess_processed.Post'),
        ),
        migrations.AddField(
            model_name='ballotmeasureselection',
            name='contest',
            field=models.ForeignKey(help_text='References the ``BallotMeasureContest`` in which the selection is an option.', on_delete=django.db.models.deletion.CASCADE, related_name='ballot_measure_selections', to='calaccess_processed.BallotMeasureContest'),
        ),
        migrations.AddField(
            model_name='ballotmeasurecontest',
            name='division_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Division`` that defines the geographical scope of the contest, e.g., a specific Congressional or State Senate district.', on_delete=django.db.models.deletion.CASCADE, related_name='ballotmeasurecontest_contests', to='calaccess_processed.Division'),
        ),
        migrations.AddField(
            model_name='retentioncontest',
            name='membership_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Membership`` that represents the tenure of a particular person (i.e., OCD ``Person`` object) in a particular public office (i.e., ``Post`` object).', on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.Membership'),
        ),
        migrations.AlterIndexTogether(
            name='post',
            index_together=set([('organization', 'label')]),
        ),
        migrations.AlterIndexTogether(
            name='organization',
            index_together=set([('classification', 'name'), ('jurisdiction', 'classification', 'name')]),
        ),
        migrations.AlterIndexTogether(
            name='membership',
            index_together=set([('organization', 'person', 'label', 'post')]),
        ),
        migrations.AddField(
            model_name='election',
            name='administrative_org_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Organization`` that administers the election.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='calaccess_processed.Organization'),
        ),
        migrations.AddField(
            model_name='candidatecontest',
            name='election_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Election`` in which the contest is decided.', on_delete=django.db.models.deletion.CASCADE, related_name='candidatecontest_contests', to='calaccess_processed.Election'),
        ),
        migrations.AddField(
            model_name='ballotmeasurecontest',
            name='election_id',
            field=models.ForeignKey(help_text='Reference to the OCD ``Election`` in which the contest is decided.', on_delete=django.db.models.deletion.CASCADE, related_name='ballotmeasurecontest_contests', to='calaccess_processed.Election'),
        ),
    ]
