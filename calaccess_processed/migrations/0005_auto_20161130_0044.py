# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-30 00:44
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('calaccess_processed', '0004_auto_20161129_2300'),
    ]

    operations = [
        migrations.CreateModel(
            name='CandidateScrapedElection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('scraped_id', models.CharField(blank=True, max_length=3, verbose_name='election identification number')),
                ('sort_index', models.IntegerField(help_text='The index value is used to preserve sorting of elections, since multiple elections may occur in a year. A greater sort index corresponds to a more recent election.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('election_type', models.CharField(blank=True, choices=[('P', 'Primary'), ('G', 'General'), ('S', 'Special'), ('R', 'Recall')], help_text='Type of election', max_length=1, verbose_name='election type')),
                ('year', models.CharField(blank=True, help_text='Election year', max_length=4, verbose_name='election year')),
            ],
        ),
        migrations.CreateModel(
            name='Proposition',
            fields=[
                ('id', models.IntegerField(help_text='Proposition unique id cast as an integer.', primary_key=True, serialize=False, unique=True, verbose_name='proposition ID')),
                ('name', models.CharField(blank=True, help_text='Name of the proposition', max_length=500, verbose_name='name')),
                ('election', models.ForeignKey(help_text='Foreign key referring to the election in which thisproposition was on the ballot', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='election', to='calaccess_processed.Election')),
            ],
        ),
        migrations.CreateModel(
            name='PropositionCommittee',
            fields=[
                ('id', models.IntegerField(help_text='Committee unique id cast as an integer.', primary_key=True, serialize=False, unique=True, verbose_name='committee ID')),
                ('name', models.CharField(blank=True, help_text='Name of the proposition', max_length=500, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='PropositionScrapedElection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PropositionSupportOppose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('support_oppose', models.CharField(blank=True, choices=[('S', 'Support'), ('O', 'Oppose')], help_text='Whether the committee supports or opposes the proposition', max_length=1, verbose_name='support or oppose')),
                ('committee', models.ForeignKey(help_text='Committee that supports or opposes the proposition', on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.PropositionCommittee')),
                ('proposition', models.ForeignKey(help_text='Proposition supported or opposed by the committee', on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.Proposition')),
            ],
        ),
        migrations.CreateModel(
            name='ScrapedCandidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='candidate name')),
                ('scraped_id', models.CharField(blank=True, max_length=7, verbose_name='candidate identification number')),
                ('office_name', models.CharField(blank=True, max_length=100, verbose_name='name of the office for which this candidate is running')),
                ('election', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.CandidateScrapedElection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScrapedCandidateCommittee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=500, verbose_name='committee name')),
                ('scraped_id', models.CharField(max_length=7, verbose_name='committee identification number')),
                ('candidate_id', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScrapedProposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='proposition name')),
                ('scraped_id', models.CharField(max_length=200, verbose_name='proposition identification number')),
                ('election', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.PropositionScrapedElection')),
            ],
            options={
                'ordering': ('-election', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ScrapedPropositionCommittee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=500, verbose_name='committee name')),
                ('scraped_id', models.CharField(max_length=7, verbose_name='committee identification number')),
                ('position', models.CharField(help_text='Whether the committee supports or opposes the proposition', max_length=100)),
                ('proposition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calaccess_processed.ScrapedProposition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='processeddatafile',
            options={'ordering': ('-version_id', 'file_name'), 'verbose_name': 'processed CAL-ACCESS data file'},
        ),
        migrations.AddField(
            model_name='propositioncommittee',
            name='propositions',
            field=models.ManyToManyField(help_text='Propositions supported or opposed by this committee', related_name='committees', through='calaccess_processed.PropositionSupportOppose', to='calaccess_processed.Proposition'),
        ),
    ]
