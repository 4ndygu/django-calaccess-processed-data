# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-13 05:42
from __future__ import unicode_literals

import calaccess_processed.models.filings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('calaccess_processed', '0032_auto_20170210_0150'),
    ]

    operations = [
        migrations.CreateModel(
            name='Form501Filing',
            fields=[
                ('date_filed', models.DateField(db_index=True, help_text='Date when the Form 501 filing was filed (from F501_502_CD.RPT_DATE)', null=True, verbose_name='from date')),
                ('statement_type', models.CharField(help_text='Describes the type of statement, e.g. "ORIGINAL", "AMENDMENT" (from LOOKUP_CODES.CODE_DESC)', max_length=62, verbose_name='statement type')),
                ('filer_id', models.CharField(help_text="Filer's unique identifier (from F501_502_CD.FILER_ID)", max_length=9, verbose_name='filer identifier')),
                ('committee_id', models.CharField(help_text="Candidate's committee's unique filer idenitifier (from F501_502_CD.COMMITTEE_ID)", max_length=9, verbose_name='committee identifier')),
                ('title', models.CharField(blank=True, help_text='Name title of the candidate (from F501_502_CD.CAND_NAMT)', max_length=100, verbose_name='candidate name title')),
                ('last_name', models.CharField(blank=True, help_text='Last name of the candidate (from F501_502_CD.CAND_NAML)', max_length=200, verbose_name='candidate last name')),
                ('first_name', models.CharField(blank=True, help_text='First name of the candidate (from F501_502_CD.CAND_NAMF)', max_length=45, verbose_name='candidate first name')),
                ('middle_name', models.CharField(blank=True, help_text='Middle name of the candidate (from F501_502_CD.CAND_NAMM)', max_length=20, verbose_name='candidate middle name')),
                ('name_suffix', models.CharField(blank=True, help_text='Name suffix of the candidate (from F501_502_CD.CAND_NAMS)', max_length=10, verbose_name='candidate name suffix')),
                ('name_moniker', models.CharField(blank=True, help_text='Moniker (aka, nickname) of the candidate (from F501_502_CD.MONIKER)', max_length=20, verbose_name='candidate name moniker')),
                ('phone', models.CharField(blank=True, help_text='Phone number of the candidate (from F501_502_CD.CAND_PHON)', max_length=20, verbose_name='candidate phone number')),
                ('fax', models.CharField(blank=True, help_text='Phone number of the candidate (from F501_502_CD.CAND_FAX)', max_length=20, verbose_name='fax number')),
                ('email', models.CharField(blank=True, help_text='Email address of the candidate (from F501_502_CD.CAND_EMAIL)', max_length=200, verbose_name='email address')),
                ('city', models.CharField(blank=True, help_text='City of the candidate (from F501_502_CD.CAND_CITY)', max_length=200, verbose_name='candidate city')),
                ('state', models.CharField(blank=True, help_text='State of the candidate (from F501_502_CD.CAND_ST)', max_length=200, verbose_name='candidate state')),
                ('zip_code', models.CharField(blank=True, help_text='Zip code (usually zip5, sometimes zip9) of the candidate (from F501_502_CD.CAND_ZIP4)', max_length=10, verbose_name='zip code')),
                ('office', models.CharField(blank=True, help_text='Position title of the office sought by the candidate (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.OFFICE_DSCR)', max_length=80, verbose_name='office sought')),
                ('agency', models.CharField(blank=True, help_text='Name of the agency with the office sought (from F501_502_CD.AGENCY_NAM)', max_length=200, verbose_name='agency name')),
                ('district', models.IntegerField(help_text='District of office sought, if applicable (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.DIST_NO)', null=True, verbose_name='district')),
                ('party', models.CharField(blank=True, help_text='Political party of the candidate (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.PARTY)', max_length=30, verbose_name='political party')),
                ('jurisdiction', models.CharField(blank=True, help_text='Jurisdiction of the office sought, e.g., "LOCAL", "STATE" (from LOOKUP_CODES_CD.CODE_DESC)', max_length=30, verbose_name='jurisdiction')),
                ('election_type', models.CharField(help_text='Type of election in which the candidate is declaring intention to run, e.g. "PRIMARY", "GENERAL" (from LOOKUP_CODES_CD.CODE_DESC)', max_length=16, null=True, verbose_name='election type')),
                ('election_year', models.IntegerField(help_text='Year in which the election is held (from F501_502_CD.YR_OF_ELEC)', null=True, verbose_name='election year')),
                ('accepted_limit', models.NullBooleanField(help_text='Indicates if either the "I accept the voluntary expenditure ceiling" or "I do not accept the voluntary expenditure" box is checked (from F501_502_CD.ACCEPT_LIMIT_YN)')),
                ('limit_not_exceeded_election_date', models.DateField(help_text='Date of the primary or special election in which the candidate did not accept the voluntary expenditure ceiling but also did exceed the ceiling. Candidates may amend their Form 501 to accept the limits for the general election or special election runoff and receive all the benefits of accepting the ceiling (from F501_502_CD.DID_EXCEED_DT)', null=True, verbose_name='limit not exceeded election date')),
                ('personal_funds_contrib_date', models.DateField(help_text='Date on which the candidate contributed personal funds in excess of the voluntary expenditure ceiling for the (from F501_502_CD.CNTRB_PRSNL_FNDS_DT)', null=True, verbose_name='personal funds contribution date')),
                ('executed_on', models.DateField(help_text='Date on which the candidate intention statement was signed (from F501_502_CD.EXECUTE_DT)', null=True, verbose_name='executed on date')),
                ('filing_id', models.IntegerField(help_text='Unique identification number for the Form 501 filing (from F501_502_CD.FILING_ID)', primary_key=True, serialize=False, verbose_name='filing id')),
                ('amendment_count', models.IntegerField(db_index=True, help_text='Number of amendments to the Form 501 filing (from maximum value of F501_502_CD.AMEND_ID)', verbose_name='Count amendments')),
            ],
            bases=(calaccess_processed.models.filings.FilingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Form501FilingVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_filed', models.DateField(db_index=True, help_text='Date when the Form 501 filing was filed (from F501_502_CD.RPT_DATE)', null=True, verbose_name='from date')),
                ('statement_type', models.CharField(help_text='Describes the type of statement, e.g. "ORIGINAL", "AMENDMENT" (from LOOKUP_CODES.CODE_DESC)', max_length=62, verbose_name='statement type')),
                ('filer_id', models.CharField(help_text="Filer's unique identifier (from F501_502_CD.FILER_ID)", max_length=9, verbose_name='filer identifier')),
                ('committee_id', models.CharField(help_text="Candidate's committee's unique filer idenitifier (from F501_502_CD.COMMITTEE_ID)", max_length=9, verbose_name='committee identifier')),
                ('title', models.CharField(blank=True, help_text='Name title of the candidate (from F501_502_CD.CAND_NAMT)', max_length=100, verbose_name='candidate name title')),
                ('last_name', models.CharField(blank=True, help_text='Last name of the candidate (from F501_502_CD.CAND_NAML)', max_length=200, verbose_name='candidate last name')),
                ('first_name', models.CharField(blank=True, help_text='First name of the candidate (from F501_502_CD.CAND_NAMF)', max_length=45, verbose_name='candidate first name')),
                ('middle_name', models.CharField(blank=True, help_text='Middle name of the candidate (from F501_502_CD.CAND_NAMM)', max_length=20, verbose_name='candidate middle name')),
                ('name_suffix', models.CharField(blank=True, help_text='Name suffix of the candidate (from F501_502_CD.CAND_NAMS)', max_length=10, verbose_name='candidate name suffix')),
                ('name_moniker', models.CharField(blank=True, help_text='Moniker (aka, nickname) of the candidate (from F501_502_CD.MONIKER)', max_length=20, verbose_name='candidate name moniker')),
                ('phone', models.CharField(blank=True, help_text='Phone number of the candidate (from F501_502_CD.CAND_PHON)', max_length=20, verbose_name='candidate phone number')),
                ('fax', models.CharField(blank=True, help_text='Phone number of the candidate (from F501_502_CD.CAND_FAX)', max_length=20, verbose_name='fax number')),
                ('email', models.CharField(blank=True, help_text='Email address of the candidate (from F501_502_CD.CAND_EMAIL)', max_length=200, verbose_name='email address')),
                ('city', models.CharField(blank=True, help_text='City of the candidate (from F501_502_CD.CAND_CITY)', max_length=200, verbose_name='candidate city')),
                ('state', models.CharField(blank=True, help_text='State of the candidate (from F501_502_CD.CAND_ST)', max_length=200, verbose_name='candidate state')),
                ('zip_code', models.CharField(blank=True, help_text='Zip code (usually zip5, sometimes zip9) of the candidate (from F501_502_CD.CAND_ZIP4)', max_length=10, verbose_name='zip code')),
                ('office', models.CharField(blank=True, help_text='Position title of the office sought by the candidate (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.OFFICE_DSCR)', max_length=80, verbose_name='office sought')),
                ('agency', models.CharField(blank=True, help_text='Name of the agency with the office sought (from F501_502_CD.AGENCY_NAM)', max_length=200, verbose_name='agency name')),
                ('district', models.IntegerField(help_text='District of office sought, if applicable (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.DIST_NO)', null=True, verbose_name='district')),
                ('party', models.CharField(blank=True, help_text='Political party of the candidate (from LOOKUP_CODES_CD.CODE_DESC, unless NULL or 0, then F501_502_CD.PARTY)', max_length=30, verbose_name='political party')),
                ('jurisdiction', models.CharField(blank=True, help_text='Jurisdiction of the office sought, e.g., "LOCAL", "STATE" (from LOOKUP_CODES_CD.CODE_DESC)', max_length=30, verbose_name='jurisdiction')),
                ('election_type', models.CharField(help_text='Type of election in which the candidate is declaring intention to run, e.g. "PRIMARY", "GENERAL" (from LOOKUP_CODES_CD.CODE_DESC)', max_length=16, null=True, verbose_name='election type')),
                ('election_year', models.IntegerField(help_text='Year in which the election is held (from F501_502_CD.YR_OF_ELEC)', null=True, verbose_name='election year')),
                ('accepted_limit', models.NullBooleanField(help_text='Indicates if either the "I accept the voluntary expenditure ceiling" or "I do not accept the voluntary expenditure" box is checked (from F501_502_CD.ACCEPT_LIMIT_YN)')),
                ('limit_not_exceeded_election_date', models.DateField(help_text='Date of the primary or special election in which the candidate did not accept the voluntary expenditure ceiling but also did exceed the ceiling. Candidates may amend their Form 501 to accept the limits for the general election or special election runoff and receive all the benefits of accepting the ceiling (from F501_502_CD.DID_EXCEED_DT)', null=True, verbose_name='limit not exceeded election date')),
                ('personal_funds_contrib_date', models.DateField(help_text='Date on which the candidate contributed personal funds in excess of the voluntary expenditure ceiling for the (from F501_502_CD.CNTRB_PRSNL_FNDS_DT)', null=True, verbose_name='personal funds contribution date')),
                ('executed_on', models.DateField(help_text='Date on which the candidate intention statement was signed (from F501_502_CD.EXECUTE_DT)', null=True, verbose_name='executed on date')),
                ('amend_id', models.IntegerField(help_text='Identifies the version of the Form 501 filing, with 0 representing the initial filing (from F501_502_CD.FILING_ID)', verbose_name='amendment id')),
                ('filing', models.ForeignKey(db_constraint=False, help_text='Unique identification number for the Form 501 filing (from F501_502_CD.FILING_ID)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='calaccess_processed.Form501Filing')),
            ],
            bases=(calaccess_processed.models.filings.FilingVersionMixin, models.Model),
        ),
        migrations.DeleteModel(
            name='Candidate',
        ),
        migrations.DeleteModel(
            name='CandidateCommittee',
        ),
        migrations.AlterIndexTogether(
            name='form501filing',
            index_together=set([('filing_id', 'amendment_count')]),
        ),
        migrations.AlterUniqueTogether(
            name='form501filingversion',
            unique_together=set([('filing', 'amend_id')]),
        ),
        migrations.AlterIndexTogether(
            name='form501filingversion',
            index_together=set([('filing', 'amend_id')]),
        ),
    ]
